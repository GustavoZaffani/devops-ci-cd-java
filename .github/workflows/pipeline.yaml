name: CI/CD Workflow

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [ closed ]

jobs:
  build-and-tests:
    if: contains(github.event.comment.body, '/ok-to-test')
    name: Build and Tests
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve pull request branch
        uses: xt0rted/pull-request-comment-branch@v1
        id: pull-request-branch

      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.pull-request-branch.outputs.head_sha }}
          token: ${{ secrets.GB_TOKEN }}
          status: pending
          context: "Build and Tests"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pull-request-branch.outputs.head_ref }}

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests
        run: mvn test

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Set latest commit status as ${{ job.status }}
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          sha: ${{ steps.pull-request-branch.outputs.head_sha }}
          token: ${{ secrets.GB_TOKEN }}
          status: ${{ job.status }}
          context: "Build and Tests"

  deploy-sandbox:
    if: contains(github.event.comment.body, '/ok-to-sandbox')
    name: Deploy to Sandbox
    runs-on: ubuntu-latest

    steps:
      - name: Retrieve pull request branch
        uses: xt0rted/pull-request-comment-branch@v1
        id: pull-request-branch

      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.pull-request-branch.outputs.head_sha }}
          token: ${{ secrets.GB_TOKEN }}
          status: pending
          context: "Deploy to Sandbox"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pull-request-branch.outputs.head_ref }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: gustavozaffani/java-ci:latest

      - name: Deploy to Sandbox
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SANDBOX_HOST }}
          username: ${{ secrets.SANDBOX_USER }}
          key: ${{ secrets.SANDBOX_KEY }}
          script: |
            echo "Deploying to sandbox..."
            docker rm sandbox -f
            docker run -d --name sandbox -p 8080:8080 gustavozaffani/java-ci:latest
            echo "Deployed to sandbox!"

      - name: Set latest commit status as ${{ job.status }}
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          sha: ${{ steps.pull-request-branch.outputs.head_sha }}
          token: ${{ secrets.GB_TOKEN }}
          status: ${{ job.status }}
          context: "Deploy to Sandbox"

  deploy-production:
    if: github.event.pull_request.merged == true
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SANDBOX_HOST }}
          username: ${{ secrets.SANDBOX_USER }}
          key: ${{ secrets.SANDBOX_KEY }}
          script: |
            echo "Deploying to production..."
            docker rm production -f
            docker run -d --name production -p 18080:8080 gustavozaffani/java-ci:latest
            echo "Deployed to production!"

